{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./cells/board.js","webpack:///./cells/token.js","webpack:///./cells/counter.js","webpack:///./cells/timer.js","webpack:///./cells/utils.js","webpack:///./cells/game.js","webpack:///./cells/builder.js","webpack:///./test/js/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Board","[object Object]","size","this","rows","cols","_board","Array","length","Cell","coord","row","col","RangeError","_toIndex","getCell","token","forEach","cell","board","destroy","res","String","label","capacity","x","y","config","ctx","font","fillStyle","textFillStyle","textAlign","textBaseline","fillText","localTextX","localTextY","textMaxWidth","Token","weight","TypeError","raw","viewConfig","type","ActiveToken","PassiveToken","super","baseConfig","tokenSize","rectRound","roundRect","_roundRect","shadowBlur","tokenShadowBlur","shadowColor","tokenShadowColor","shadowOffsetX","tokenShadowOffsetX","shadowOffsetY","tokenShadowOffsetY","tokenFillColor","strokeStyle","tokenBorderColor","lineWidth","tokenBorderWidth","values","states","indexOf","Error","join","state","arw1","arwC","arw2","beginPath","moveTo","lineTo","stroke","closePath","arcC","arcR","arc","Math","PI","fill","centerX","center","centerY","figRadius","figureRadius","halfFigRadius","lineCap","arrowColor","arcFill","BOTTOM","_drawSingleArrow","_drawSingleArc","TOP","LEFT","RIGHT","ALL","VERTICAL","HORIZONTAL","NONE","xLineColor","assign","Counter","init","_init","steps","toString","Timer","startStamp","Date","getTime","currentStamp","pauseTime","pauseStamp","floor","getSeconds","getTimeArray","map","chunk","random","from","to","undefined","cells_game","PLAY","CLOSE","RELOAD","VICTORY","cellSize","timer","counter","canvas","document","createElement","getContext","backgroundColor","hoverToken","selected","eventQueue","changed","paused","hoverButton","baseFontSize","panelFontSize","cellFont","cellPicFont","panelFont","canvasPadding","cellPadding","panelSize","panelBasePadding","panelButtonSize","panelButtonMargin","width","height","frameCallback","frame","computeStyles","attachEvents","selector","querySelector","appendChild","cellConfig","freeze","activeConfig","PassiveConfig","timerConfig","counterConfig","panelConfig","panelBackground","bottomLineY","bottomLineWidth","bottomLineStrokeStyle","iconRadius","iconLineWidth","iconStrokeStyle","iconCenterY","closeCenterX","reloadCenterX","reloadCircleRads","pauseCenterX","pauseIconFill","hoverIconStyle","addEventListener","e","moveHandler","push","onHover","removeEventListener","onClick","onTouch","cursorPix","canvasPixelCoords","hoverCell","hoverTokenCoords","hoverButtonCoords","cursorType","style","cursor","pixCoords","coords","button","getItem","isValidMove","change","onChange","incr","unpause","pause","toUpperCase","isComplete","tag","target","left","offsetLeft","top","offsetTop","clickX","clickY","changedTouches","pageX","pageY","boardCoords","line","item","cellPixelCoords","canvPad","cellPad","tSize","pSize","toCellX","toCellY","cfg","baseX","baseY","indent","buttons","len","indexToCoord","xStep","yStep","pos","canCrossIt","who","what","whoToken","whatCell","whatToken","whatTokenWeight","fromToken","toToken","fromPixelCoords","tokenPixelCoords","toPixelCoords","setItem","radius","tl","tr","br","bl","defaultRadius","side","quadraticCurveTo","_data","passiveConfig","parentNode","removeChild","onclose","data","isArray","primitive","cX","cY","clearRect","fillRect","clear","halfW","hover","baseStyle","hoverStyle","padding","drawPanel","draw","drawPausedBoard","changes","keys","queue","stamp","update","handler","shift","frameDescriptor","window","requestAnimationFrame","cancelAnimationFrame","load","run","drawResults","onopen","shuffle","start","builder","SAVE","MAX_LINE_VALUE","MIN_LINE_VALUE","MIN_SIZE","initialSize","initialBoard","arrowButtonWidth","arrowButtonHeight","panelCurrentToken","panelSelectedToken","computeCanvasSize","buttonRadius","buttonPadding","computePanelButtons","decreaseRowsButton","increaseRowsButton","decreaseColsButton","increaseColsButton","leftArrowButton","setToken","rightArrowButton","closeButton","reloadButton","saveButton","panelTokens","v","fontColor","buttonColor","hoverButtonColor","iconColor","arrowWidth","arrowHeight","arrowLineWidth","hoverButtonName","toRaw","newToken","oldData","save","newSize","newBoard","newMap","refreshUI","isValid","onsave","validators","conf","result","errors","warnings","minimum","recommended","numCount","reduce","a","overflow","freeCount","passiveCount","incorrectAngleTokens","incorrectRowTokens","incorrectColTokens","includes","filter","j","abs","rawMap","fn","acc","console","log","onerror","slice","onwarning","buttonName","clearLocalData","color","buttonSize","hoverColor","fillColor","_drawButtonArc","_drawPanelText","tConf","h","cells","confirm","game","location","reload","mount","alert"],"mappings":"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","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nexport class Board {\n\n    constructor(size){\n        this.rows = size[0]\n        this.cols = size[1]\n        this._board = Array(this.cols * this.rows)\n        \n        for(let i = 0; i < this.length; i++){\n            this._board[i] = new Cell()\n        }\n    }\n\n    get length(){\n        return this._board.length\n    }\n\n    _toIndex(coord){\n        const [row, col] = coord\n\n        if(row < 0 || row >= this.rows || col < 0 || col >= this.cols){\n            throw RangeError(`Board: item [${ row }, ${ col }] is out of \\\nrange, it must be >= [0, 0] and < [${ this.rows }, ${ this.cols }]`)\n        }\n\n        return row * this.cols + col\n    }\n\n    getCell(coord){\n        return this._board[ this._toIndex(coord) ]\n    }\n\n    getItem(coord){\n        return this.getCell(coord).token\n    }\n\n    setItem(coord, token){\n        this.getCell(coord).token = token\n    }\n\n    destroy(){\n        this._board.forEach((cell, i, board) => { \n            cell.destroy()\n            board[i] = null \n        })\n    }\n\n    toString(){\n        let res = ''\n        \n        this._board.forEach((cell, i) => {\n            \n            if(i && i % this.cols === 0){\n                res += '\\n'\n            }\n            \n            res += ` ${ String(cell) }`\n        })\n\n        return res\n    }\n}\n\n\nclass Cell {\n\n    constructor(label = null, token = null){\n        this.capacity = 100\n        this.label = label\n        this.token = token\n\n        this.x = null\n        this.y = null\n    }\n\n    destroy(){\n        this.token = null\n    }\n\n    toString(){\n        return String(this.token)\n    }\n\n    draw(config){\n        const ctx = config.ctx\n\n        ctx.font = config.font\n        ctx.fillStyle = config.textFillStyle\n        ctx.textAlign = config.textAlign\n        ctx.textBaseline = config.textBaseline\n        ctx.fillText(\n            String(this.label || ''),\n            this.x + config.localTextX,\n            this.y + config.localTextY,\n            config.textMaxWidth\n        )\n    }\n}\n","\nclass Token {\n\n    constructor(){\n        this.weight = 0\n    }\n    \n    draw(){\n        throw TypeError(`\\\nToken.draw: is an abstract method. Must be overridden by subclasses`)\n    }\n\n    static create(raw, viewConfig){\n        \n        const type = typeof(raw)\n\n        if(type === 'number'){\n            return new ActiveToken(raw, viewConfig)\n        } else if(type === 'string'){\n            return new PassiveToken(raw, viewConfig)\n        } else {\n            return null\n        }\n    }\n\n    static toRaw(token){\n        return (token && 'value' in token) ? token.value : null\n    }\n}\n\n\nclass ActiveToken extends Token {\n    \n    constructor(value, viewConfig){\n        super()   \n        \n        // canvas pixels\n        this.x = viewConfig.x\n        this.y = viewConfig.y\n        // base sizes\n        this.config = viewConfig.baseConfig\n        // model\n        this.weight = 60\n        this.value = value\n    }\n\n    toString(){\n        return String(this.value)\n    }\n\n    draw(config){\n\n        const ctx = this.config.ctx,\n              tokenSize = this.config.tokenSize,\n              rectRound = this.config.rectRound,\n              roundRect = this.config._roundRect,\n              x = this.x,\n              y = this.y\n\n        // token\n        ctx.shadowBlur = config.tokenShadowBlur\n        ctx.shadowColor = config.tokenShadowColor\n        ctx.shadowOffsetX = config.tokenShadowOffsetX\n        ctx.shadowOffsetY = config.tokenShadowOffsetY   \n        ctx.fillStyle = config.tokenFillColor\n        roundRect(ctx, x, y, tokenSize, tokenSize, rectRound, true, false)\n        // reset shadow effect\n        ctx.shadowBlur = 0\n        ctx.shadowOffsetX = 0\n        ctx.shadowOffsetY = 0\n            \n        // border\n        ctx.strokeStyle = config.tokenBorderColor\n        ctx.lineWidth = config.tokenBorderWidth\n        roundRect(ctx, x, y, tokenSize, tokenSize, rectRound, false, true)\n\n        // text\n        ctx.font = config.font\n        ctx.fillStyle = config.textFillStyle\n        ctx.textAlign = config.textAlign\n        ctx.textBaseline = config.textBaseline\n        ctx.fillText(\n            String(this.value),\n            x + config.localTextX,\n            y + config.localTextY,\n            config.textMaxWidth\n        )\n    }\n}\n\n\nclass PassiveToken extends Token {\n    \n    \n    constructor(value, viewConfig){\n        super()\n\n        if(Object.values(this.states).indexOf(value) < 0){\n            throw new Error(\n                'PassiveToken.constructor: the \"value\" ['+ value +'] should be ' + \n                'an existing state (' + Object.values(this.states).join(', ') + ')'\n            )\n        }\n\n        // canvas pixels\n        this.x = viewConfig.x\n        this.y = viewConfig.y\n        // common sizes\n        this.config = viewConfig.baseConfig\n        // model\n        this.weight = 80\n        this.value = value\n        this.state = value\n    }\n\n    toString(){\n        return String(this.value)\n    }\n\n    _drawSingleArrow(ctx, arw1, arwC, arw2){\n        ctx.beginPath()\n        ctx.moveTo(...arw1)\n        ctx.lineTo(...arwC)\n        ctx.lineTo(...arw2)\n        ctx.stroke()\n        ctx.closePath()\n    }\n\n    _drawSingleArc(ctx, arcC, arcR){\n        ctx.beginPath()\n        ctx.arc(...arcC, arcR, 0, Math.PI * 2)\n        ctx.fill()\n        ctx.closePath()\n    }\n\n    draw(config){\n\n        const ctx = this.config.ctx,\n              tokenSize = this.config.tokenSize,\n              rectRound = this.config.rectRound,\n              roundRect = this.config._roundRect,\n              x = this.x,\n              y = this.y,\n              centerX = x + config.center,\n              centerY = y + config.center,\n              figRadius = config.figureRadius,\n              halfFigRadius = figRadius / 2\n\n        ctx.fillStyle = config.tokenFillColor\n        roundRect(ctx, x, y, tokenSize, tokenSize, rectRound, true, false)\n        \n        // arrows\n        ctx.lineCap = config.lineCap\n        ctx.lineWidth = config.lineWidth\n        ctx.strokeStyle = config.arrowColor\n        ctx.fillStyle = config.arcFill\n\n        switch(this.state){\n\n        case this.states.BOTTOM:\n            this._drawSingleArrow(\n                ctx,\n                [centerX - figRadius, centerY], \n                [centerX, centerY + figRadius],\n                [centerX + figRadius, centerY]\n            )\n            this._drawSingleArc(\n                ctx,\n                [centerX, centerY - halfFigRadius],\n                halfFigRadius\n            )\n            break;\n\n        case this.states.TOP:\n            this._drawSingleArrow(\n                ctx,\n                [centerX - figRadius, centerY], \n                [centerX, centerY - figRadius],\n                [centerX + figRadius, centerY]\n            )\n            this._drawSingleArc(\n                ctx,\n                [centerX, centerY + halfFigRadius],\n                halfFigRadius\n            )\n            break;\n\n        case this.states.LEFT:\n            this._drawSingleArrow(\n                ctx,\n                [centerX, centerY - figRadius], \n                [centerX - figRadius, centerY],\n                [centerX, centerY + figRadius]\n            )\n            this._drawSingleArc(\n                ctx,\n                [centerX + halfFigRadius, centerY],\n                halfFigRadius\n            )\n            break;\n\n        case this.states.RIGHT:\n            this._drawSingleArrow(\n                ctx,\n                [centerX, centerY - figRadius], \n                [centerX + figRadius, centerY],\n                [centerX, centerY + figRadius]\n            )\n            this._drawSingleArc(\n                ctx,\n                [centerX - halfFigRadius, centerY],\n                halfFigRadius\n            )\n            break;\n\n        case this.states.ALL:\n            this._drawSingleArrow(\n                ctx,\n                [centerX - halfFigRadius, centerY - figRadius],\n                [centerX, centerY - figRadius - halfFigRadius],\n                [centerX + halfFigRadius, centerY - figRadius]\n            )\n            this._drawSingleArrow(\n                ctx,\n                [centerX - halfFigRadius, centerY + figRadius],\n                [centerX, centerY + figRadius + halfFigRadius],\n                [centerX + halfFigRadius, centerY + figRadius]\n            )\n            this._drawSingleArrow(\n                ctx,\n                [centerX - figRadius, centerY - halfFigRadius],\n                [centerX - figRadius - halfFigRadius, centerY],\n                [centerX - figRadius, centerY + halfFigRadius]\n            )\n            this._drawSingleArrow(\n                ctx,\n                [centerX + figRadius, centerY - halfFigRadius],\n                [centerX + figRadius + halfFigRadius, centerY],\n                [centerX + figRadius, centerY + halfFigRadius]\n            )\n            \n            ctx.beginPath()\n            ctx.strokeStyle = config.arcFill\n            ctx.moveTo(centerX, centerY - halfFigRadius)\n            ctx.lineTo(centerX, centerY + halfFigRadius)\n            ctx.moveTo(centerX - halfFigRadius, centerY)\n            ctx.lineTo(centerX + halfFigRadius, centerY)\n            ctx.stroke()\n            ctx.closePath()\n            /*\n            this._drawSingleArc(\n                ctx,\n                [centerX, centerY],\n                halfFigRadius,\n            )*/\n            break;\n\n        case this.states.VERTICAL:\n            this._drawSingleArrow(\n                ctx,\n                [centerX - halfFigRadius, centerY - figRadius],\n                [centerX, centerY - figRadius - halfFigRadius],\n                [centerX + figRadius, centerY - halfFigRadius]\n            )\n            this._drawSingleArrow(\n                ctx,\n                [centerX - figRadius, centerY + halfFigRadius],\n                [centerX, centerY + figRadius + halfFigRadius],\n                [centerX + halfFigRadius, centerY + figRadius]\n            )\n            this._drawSingleArc(\n                ctx,\n                [centerX, centerY],\n                halfFigRadius,\n            )\n            break;\n        \n        case this.states.HORIZONTAL:\n            this._drawSingleArrow(\n                ctx,\n                [centerX - halfFigRadius, centerY - figRadius],\n                [centerX - figRadius - halfFigRadius, centerY],\n                [centerX - figRadius, centerY + halfFigRadius]\n            )\n            this._drawSingleArrow(\n                ctx,\n                [centerX + figRadius, centerY - halfFigRadius],\n                [centerX + figRadius + halfFigRadius, centerY],\n                [centerX + halfFigRadius, centerY + figRadius]\n            )\n            this._drawSingleArc(\n                ctx,\n                [centerX, centerY],\n                halfFigRadius,\n            )\n            break;\n\n        case this.states.NONE:\n\n            this._drawSingleArc(\n                ctx,\n                [centerX, centerY],\n                figRadius + halfFigRadius\n            )\n            ctx.beginPath()\n            ctx.strokeStyle = config.xLineColor\n            ctx.moveTo(centerX - halfFigRadius, centerY - halfFigRadius)\n            ctx.lineTo(centerX + halfFigRadius, centerY + halfFigRadius)\n            ctx.moveTo(centerX + halfFigRadius, centerY - halfFigRadius)\n            ctx.lineTo(centerX - halfFigRadius, centerY + halfFigRadius)\n            ctx.stroke()\n            ctx.closePath()\n            break;\n        }\n    }\n}\n\n\nObject.assign(PassiveToken.prototype, {\n    states: {\n        NONE: 'none',\n        LEFT: 'left',\n        RIGHT: 'right',\n        TOP: 'top',\n        BOTTOM: 'bottom',\n        HORIZONTAL: 'horizontal',\n        VERTICAL: 'vertical',\n        ALL: 'all',\n    }\n})\n\n\nexport {\n    Token,\n    ActiveToken,\n    PassiveToken,\n}\n","\nexport class Counter {\n\n    constructor(init = 0){\n        this._init = init\n        this.steps = init\n    }\n\n    incr(){\n        this.steps += 1\n    }\n\n    start(){\n        this.steps = this._init\n    }\n\n    draw(config){\n        const ctx = config.ctx\n\n        ctx.font = config.font\n        ctx.fillStyle = config.textFillStyle\n        ctx.textAlign = config.textAlign\n        ctx.textBaseline = config.textBaseline\n        ctx.fillText(\n            '#'+this.toString(),\n            config.x,\n            config.y,\n        )\n    }\n\n    toString(){\n        return this.steps\n    }\n}\n","\nexport class Timer {\n\n    constructor(){}\n\n    start(){\n        this.startStamp = new Date().getTime()\n        this.currentStamp = this.startStamp\n        this.pauseTime = 0\n        this.pauseStamp = 0\n        this.pauseTime = 0\n    }\n\n    pause(){\n        this.pauseStamp = new Date().getTime()\n    }\n\n    unpause(){\n        this.pauseTime += new Date().getTime() - this.pauseStamp\n    }\n\n    draw(config){\n        const ctx = config.ctx\n\n        ctx.font = config.font\n        ctx.fillStyle = config.textFillStyle\n        ctx.textAlign = config.textAlign\n        ctx.textBaseline = config.textBaseline\n        ctx.fillText(\n            this.toString(),\n            config.x,\n            config.y,\n        )\n    }\n\n    update(){\n        this.currentStamp = new Date().getTime()\n    }\n\n    getSeconds(){\n        return Math.floor((this.currentStamp - this.startStamp - this.pauseTime) / 1000)\n    }\n\n    getTimeArray(){\n        const s = this.getSeconds()\n        \n        return [\n            Math.floor(s / 3600),\n            Math.floor(s / 60),\n            s % 60,\n        ]\n    }\n\n    toString(){\n        const time = this.getTimeArray()\n\n        const strTimeArray = time.map((chunk, i) => {\n            return (i && chunk < 10) ? `0${ chunk }` : `${ chunk }`\n        })\n\n        return strTimeArray.join(':')\n    }\n}","\nexport function random(from, to) {\n    if(to === undefined){\n        to = from\n        from = 0\n    }\n    return Math.floor(Math.random() * (to - from) + from)\n}\n","import { Board } from './board'\nimport {\n    Token,\n    ActiveToken,\n    PassiveToken,\n} from './token'\nimport { Counter } from './counter'\nimport { Timer } from './timer'\nimport { random } from './utils'\n\n\nclass Cells {\n\n    constructor(size, config){\n\n        this.PLAY = 'play'\n        this.CLOSE = 'close'\n        this.RELOAD = 'reload'\n        this.VICTORY = 'victory'\n\n        this.cellSize = 0  // base value\n        \n        Object.assign(this, config)\n        \n        // model\n        this.board = new Board(size)\n        this.timer = new Timer()\n        this.counter = new Counter()\n\n        // canvas HTMLElement\n        this.canvas = document.createElement('canvas')\n        this.ctx = this.canvas.getContext('2d')\n        this.backgroundColor = '#fff'\n\n        // in board coords\n        this.hoverToken = null\n        this.selected = null\n\n        this.eventQueue = []\n        \n        this.changed = true\n        this.paused = false\n        this.state = this.PLAY\n        // button name\n        this.hoverButton = null\n        \n        // text\n        this.baseFontSize = Math.floor(this.cellSize * 0.3)\n        this.panelFontSize = Math.floor(this.baseFontSize * 0.9)\n    \n        this.cellFont = `900 ${ this.baseFontSize }px 'Montserrat', serif`\n        this.cellPicFont = `${ this.baseFontSize * 2 }px 'Icons'`\n        this.panelFont = `bold ${ this.panelFontSize }px 'Montserrat', serif`\n        \n        // paddings & styles\n        this.canvasPadding = Math.floor(this.cellSize * 0.05)\n        this.cellPadding = Math.floor(this.cellSize * 0.05)\n        this.rectRound = Math.floor(this.cellSize * 0.07)\n        this.tokenSize = this.cellSize - this.cellPadding * 2\n\n        // menu panel\n        this.panelSize = Math.floor(this.cellSize * 0.7)\n        this.panelBasePadding = this.canvasPadding + this.cellPadding\n        this.panelButtonSize = this.panelFontSize\n        this.panelButtonMargin = this.panelButtonSize * 0.4\n\n        this.canvas.width = this.cellSize * this.board.cols + this.canvasPadding * 2\n        this.canvas.height = (\n            this.cellSize * this.board.rows + \n            this.canvasPadding * 2 + this.panelSize\n        )\n        \n        this.frameCallback = this.frame.bind(this)\n        this.computeStyles()\n        this.attachEvents()\n    }\n\n    mount(selector){\n        document.querySelector(selector).appendChild(this.canvas)\n    }\n\n    computeStyles(){\n\n        this.cellConfig = Object.freeze({\n            ctx: this.ctx,\n            font: this.cellFont,\n            textFillStyle: '#999',\n            textAlign: 'center',\n            textBaseline: 'middle',\n            textMaxWidth: Math.floor(this.cellSize * 0.70),\n            localTextX: Math.floor(this.cellSize / 2),\n            localTextY: Math.floor(this.cellSize / 1.8)\n        })\n\n        this.baseConfig = Object.freeze({\n            ctx: this.ctx,\n            tokenSize: this.tokenSize,\n            rectRound: this.rectRound,  // round size\n            _roundRect: this._roundRect,  // function\n        })\n\n        this.activeConfig = Object.freeze({\n            // token\n            tokenBorderColor: '#bbb',\n            tokenBorderWidth: Math.floor(this.tokenSize * 0.02),\n            tokenFillColor: '#ddd',\n            tokenShadowColor: '#999',\n            tokenShadowBlur: Math.floor(this.tokenSize * 0.05),\n            tokenShadowOffsetX: Math.floor(this.tokenSize * 0.04),\n            tokenShadowOffsetY: Math.floor(this.tokenSize * 0.04),\n            // text\n            font: this.cellFont,\n            textFillStyle: '#555',\n            textAlign: 'center',\n            textBaseline: 'middle',\n            textMaxWidth: Math.floor(this.tokenSize * 0.75),\n            localTextX: Math.floor(this.tokenSize / 2),\n            localTextY: Math.floor(this.tokenSize / 1.8),\n        })\n\n        this.PassiveConfig = Object.freeze({\n            // token\n            tokenFillColor: '#fff',\n            // figure\n            lineCap: 'round',\n            lineWidth: Math.floor(this.tokenSize * 0.09),\n            arrowColor: \"#777\",\n            xLineColor: '#fff',\n            arcFill: \"#bbb\",\n            figureRadius: Math.floor(this.tokenSize * 0.2),\n            center: Math.floor(this.tokenSize / 2)\n        })\n\n        this.timerConfig = Object.freeze({\n            ctx: this.ctx,\n            x: Math.floor(this.canvasPadding + this.cellPadding),\n            y: Math.floor(this.panelSize * 0.6),\n            // text\n            font: this.panelFont,\n            textFillStyle: '#666',\n            textAlign: 'left',\n            textBaseline: 'middle',\n        })\n\n        this.counterConfig = Object.freeze({\n            ctx: this.ctx,\n            x: Math.floor(this.canvas.width / 2),\n            y: Math.floor(this.panelSize * 0.6),\n            // text\n            font: this.panelFont,\n            textFillStyle: '#666',\n            textAlign: 'center',\n            textBaseline: 'middle',\n        })\n\n        this.panelConfig = Object.freeze({\n            ctx: this.ctx,\n            panelBackground: '#fff',  // '#999',\n            bottomLineY: Math.floor(this.panelSize * 0.99),\n            bottomLineWidth: Math.floor(this.cellSize * 0.04),\n            bottomLineStrokeStyle: '#666',\n            iconRadius: Math.floor(this.panelButtonSize * 0.45),\n            iconLineWidth: Math.floor(this.panelButtonSize * 0.15),\n            iconStrokeStyle: '#bbb',\n            iconCenterY: Math.floor(this.panelSize * 0.55),\n            closeCenterX: Math.floor(this.canvas.width - (this.panelButtonSize * 0.5 + this.panelBasePadding)),\n            reloadCenterX: Math.floor(this.canvas.width - (this.panelButtonSize * 1.5 + this.panelBasePadding + this.panelButtonMargin)),\n            reloadCircleRads: [Math.PI * 0.3, Math.PI * 1.85],\n            pauseCenterX: Math.floor(this.canvas.width - (this.panelButtonSize * 2.5 + this.panelBasePadding + this.panelButtonMargin * 2)),\n            pauseIconFill: '#bbb',\n            hoverIconStyle: '#999'\n        })\n    }\n\n    attachEvents(){\n        // cursor & cursor coords\n        this.canvas.addEventListener('mouseover', (function(e){\n            \n            const moveHandler = (function(e){\n                this.eventQueue.push(this.onHover.bind(this, e))\n            }).bind(this)\n\n            this.canvas.addEventListener('mouseleave', (function(e){\n                this.canvas.removeEventListener('mousemove', moveHandler, false)\n                this.hoverToken = null\n                this.hoverButton = null\n                this.changed = true\n            }).bind(this), false)\n\n            this.canvas.addEventListener('mousemove', moveHandler, false)\n\n        }).bind(this), false)\n\n        // click & selected\n        this.canvas.addEventListener('click', (function(e){\n            this.eventQueue.push(this.onClick.bind(this, e))\n        }).bind(this), false)\n\n        this.canvas.addEventListener('touchstart', (function(e){\n            this.eventQueue.push(this.onHover.bind(this, e))\n            this.eventQueue.push(this.onTouch.bind(this, e))\n        }).bind(this), false)\n\n        this.canvas.addEventListener('touchend', (function(e){\n            this.eventQueue.push(this.onTouch.bind(this, e))\n            this.hoverToken = null\n        }).bind(this), false)\n\n        /* \n        Холст не перемещается по странице, при ведении пальцем,\n        но если карта большая, ее не сдвинуть - нужно создать иконку\n        для вкл/выкл перемещения или при долком касании end-start >= 1000\n        \n        this.canvas.addEventListener('touchmove', (function(e){\n            e.preventDefault()\n        }).bind(this), false)\n\n        this.canvas.addEventListener('touchcancel', (function(e){\n            e.preventDefault()\n        }).bind(this), false) */\n    }\n\n    onHover(e){\n        const cursorPix = this.canvasPixelCoords(e),\n              hoverCell = this.hoverTokenCoords(cursorPix),\n              hoverButton = this.hoverButtonCoords(cursorPix),\n              cursorType = (hoverCell || hoverButton) ? 'pointer' : 'default'\n            \n        this.hoverToken = hoverCell\n        this.hoverButton = hoverButton\n        this.canvas.style.cursor = cursorType\n    }\n\n    onClick(e){\n        const pixCoords = this.canvasPixelCoords(e),\n              coords = this.hoverTokenCoords(pixCoords),\n              button = this.hoverButtonCoords(pixCoords)\n\n        if(!coords && !button){\n            return\n        }\n\n        if(coords && !this.paused){\n\n            const token = this.board.getItem(coords)\n            \n            if(token instanceof ActiveToken){\n                this.selected = coords\n            } else if(\n                token === null &&\n                this.selected &&\n                this.isValidMove(this.selected, coords)\n            ){\n                this.change(this.selected, coords)\n                this.selected = null\n                this.eventQueue.push(this.onChange.bind(this))\n                this.eventQueue.push(this.counter.incr.bind(this.counter))\n            }\n\n        } else if(button){\n            if(button === 'pause'){\n                this.paused ? this.timer.unpause() : this.timer.pause()\n                this.paused = !this.paused\n            } else {\n                this.state = this[button.toUpperCase()]\n            }\n        }\n\n    }\n\n    onTouch(e){\n        const pixCoords = this.canvasPixelCoords(e),\n              coords = this.hoverTokenCoords(pixCoords)\n\n        if(coords && !this.paused){\n\n            const token = this.board.getItem(coords)\n            \n            if(token instanceof ActiveToken){\n                this.selected = coords\n            } else if(\n                token === null &&\n                this.selected &&\n                this.isValidMove(this.selected, coords)\n            ){\n                this.change(this.selected, coords)\n                this.selected = null\n                this.eventQueue.push(this.onChange.bind(this))\n                this.eventQueue.push(this.counter.incr.bind(this.counter))\n            }\n        }   \n    }\n    \n    onChange(){\n        if(this.isComplete()){\n            this.state = this.VICTORY\n        }\n    }\n\n    indexToCoord(i){\n        const line = Math.floor(i / this.board.cols),\n              item = i % this.board.cols\n\n        return [line, item]\n    }\n\n    canvasPixelCoords(e){\n\n        const tag = e.target,\n              left = tag.offsetLeft,\n              top = tag.offsetTop\n\n        let clickX, clickY\n        \n        if(e.type === 'touchstart' || e.type === 'touchend'){\n            clickX = e.changedTouches[0].pageX\n            clickY = e.changedTouches[0].pageY\n        } else {\n            clickX = e.pageX\n            clickY = e.pageY\n        }\n\n        const x = clickX - left,\n              y = clickY - top\n\n        return [x, y]\n    }\n\n    cellPixelCoords(boardCoords){\n        const [line, item] = boardCoords,\n              x = item * this.cellSize + this.canvasPadding,\n              y = line * this.cellSize + this.canvasPadding + this.panelSize\n\n        return [x, y]\n    }\n\n    // token local pixel coords\n    tokenPixelCoords(boardCoords){\n        const [x, y] = this.cellPixelCoords(boardCoords)\n        return [x + this.cellPadding, y + this.cellPadding]\n    }\n\n    // returns null or token board coords if cursor is on it\n    hoverTokenCoords(coords){\n        const canvPad = this.canvasPadding,\n              height = this.canvas.height - canvPad,\n              width = this.canvas.width - canvPad,\n              cellPad = this.cellPadding,\n              tSize = this.tokenSize,\n              pSize = this.panelSize\n\n        if(\n            (coords[0] < canvPad || coords[1] < canvPad + pSize) ||\n            (coords[0] > width || coords[1] > height)\n        ){\n            return null\n        }\n\n        const toCellX = (coords[0] - canvPad) % (tSize + cellPad * 2),\n              toCellY = (coords[1] - (canvPad + pSize)) % (tSize + cellPad * 2),\n              x = Math.floor((coords[0] - canvPad) / (tSize + cellPad * 2)),\n              y = Math.floor((coords[1] - (canvPad + pSize)) / (tSize + cellPad * 2))\n\n        return (\n            (toCellX > cellPad && toCellY > cellPad) &&\n            (\n                (toCellX < tSize + Math.floor(cellPad * 1.4)) && \n                (toCellY < tSize + Math.floor(cellPad * 1.4))\n            )\n        ) ? [y, x] : null\n    }\n\n    hoverButtonCoords(coords){\n\n        const canvPad = this.canvasPadding,\n              width = this.canvas.width - canvPad,\n              height = this.panelSize\n\n        if(\n            (coords[0] < this.canvas.width / 2 || coords[1] < canvPad) ||\n            (coords[0] > width || coords[1] > height)\n        ){\n            return null\n        }\n\n        const cfg = this.panelConfig,\n              r = cfg.iconRadius * 1.2,\n              size = r * 2,\n              baseX = cfg.closeCenterX - r,\n              baseY = cfg.iconCenterY - r,\n              indent = this.panelButtonSize + this.panelButtonMargin,\n              buttons = ['close', 'reload', 'pause']\n\n        for(let i = 0, len = buttons.length; i < len; i ++){\n            const x = baseX - indent * i,\n                  y = baseY\n\n            if(coords[0] > x && coords[0] < x + size && coords[1] > y && coords[1] < y + size){\n                return buttons[i]\n            }\n        }\n\n        return null\n    }\n\n    isComplete(){\n        const board = this.board,\n              len = board.length\n\n        for(let i = 0; i < len; i++){\n            const cell = board.getCell(this.indexToCoord(i)),\n                  token = cell.token\n            if(cell.label !== (token ? token.value : token)){\n                return false\n            }\n        }\n\n        return true\n    }\n\n    // from & to in border coords\n    isValidMove(from, to){\n        if(from[0] !== to[0] && from[1] !== to[1]){\n            return false\n        }\n\n        const xStep = ((from[0] === to[0]) ? 0 : (from[0] < to[0]) ? 1 : -1),\n              yStep = ((from[1] === to[1]) ? 0 : (from[1] < to[1]) ? 1 : -1),\n              pos = [from[0] + xStep, from[1] + yStep]\n\n        while(!(pos[0] === to[0] && pos[1] === to[1])){\n            if(!this.canCrossIt(from, pos)){\n                return false\n            }\n            pos[0] += xStep\n            pos[1] += yStep\n        }\n\n        return true\n    }\n\n    // who & what in border coords\n    canCrossIt(who, what){\n        const HEAVY = 80,\n              LIGHT = 40\n\n        const whoToken = this.board.getItem(who),\n              whatCell = this.board.getCell(what),\n              // whatTokenWeight = (whatCell.token ? whatCell.token.weight : 0),\n              whatToken = whatCell.token\n\n        let whatTokenWeight = 0\n              \n        if(whatToken){\n          if(whatToken instanceof PassiveToken){\n            switch(whatToken.state){\n            \n            case whatToken.states.NONE:\n                whatTokenWeight = HEAVY\n                break;\n\n            case whatToken.states.ALL:\n                whatTokenWeight = LIGHT\n                break;\n\n            case whatToken.states.BOTTOM:\n                whatTokenWeight = who[0] < what[0] && who[1] === what[1] ? LIGHT : HEAVY\n                break;\n            \n            case whatToken.states.TOP:\n                whatTokenWeight = who[0] > what[0] && who[1] === what[1] ? LIGHT : HEAVY\n                break;\n\n            case whatToken.states.LEFT:\n                whatTokenWeight = who[0] === what[0] && who[1] > what[1] ? LIGHT : HEAVY\n                break;\n\n            case whatToken.states.RIGHT:\n                whatTokenWeight = who[0] === what[0] && who[1] < what[1] ? LIGHT : HEAVY\n                break;\n\n            case whatToken.states.HORIZONTAL:\n                whatTokenWeight = who[0] === what[0] ? LIGHT : HEAVY\n                break;\n\n            case whatToken.states.VERTICAL:\n                whatTokenWeight = who[1] === what[1] ? LIGHT : HEAVY\n                break;\n        \n            }\n            \n          } else {\n              whatTokenWeight = whatToken.weight\n          }\n        }\n\n        return (whatCell.capacity - whatTokenWeight - whoToken.weight) >= 0\n    }\n\n    change(from, to){\n        const board = this.board,\n              fromToken = this.board.getItem(from),\n              toToken = this.board.getItem(to),\n              fromPixelCoords = this.tokenPixelCoords(from),\n              toPixelCoords = this.tokenPixelCoords(to)\n\n        board.setItem(from, toToken)\n        board.setItem(to, fromToken)\n\n        if(toToken && toToken instanceof Token){\n            toToken.x = fromPixelCoords[0]\n            toToken.y = fromPixelCoords[1]\n        }\n\n        if(fromToken && fromToken instanceof Token){\n            fromToken.x = toPixelCoords[0]\n            fromToken.y = toPixelCoords[1]\n        }\n    }\n\n    _roundRect(ctx, x, y, width, height, radius = 5, fill = true, stroke = true){\n \n        if (typeof radius === 'number') {\n          radius = {tl: radius, tr: radius, br: radius, bl: radius};\n        } else {\n          var defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0};\n          for (var side in defaultRadius) {\n            radius[side] = radius[side] || defaultRadius[side];\n          }\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(x + radius.tl, y);\n        ctx.lineTo(x + width - radius.tr, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n        ctx.lineTo(x + width, y + height - radius.br);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\n        ctx.lineTo(x + radius.bl, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n        ctx.lineTo(x, y + radius.tl);\n        ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n        ctx.closePath();\n        if (fill) {\n          ctx.fill();\n        }\n        if (stroke) {\n          ctx.stroke();\n        }\n    }\n\n    shuffle(n){\n        let from, to, token\n        const len = this.board.length - 1\n\n        while(n--){\n            do {\n                do {\n                    from = this.indexToCoord(random(len))\n                    token = this.board.getItem(from)\n                } while(token instanceof PassiveToken)\n\n                do {\n                    to = this.indexToCoord(random(len))\n                    token = this.board.getItem(to)\n                } while(token instanceof PassiveToken)\n\n            } while(from[0] === to[0] && from[1] === to[1])\n\n            this.change(from, to)\n        }\n    }\n\n    destroy(){\n        delete this.frameCallback\n        delete this._data\n        delete this.ctx\n        delete this.baseConfig\n        delete this.activeConfig\n        delete this.passiveConfig\n        delete this.panelConfig\n        delete this.counterConfig\n        delete this.timerConfig\n        this.board.destroy()\n        delete this.board\n        this.canvas.parentNode.removeChild(this.canvas)\n        delete this.canvas\n\n        if(this.onclose){\n            this.onclose()\n        }\n    }\n\n    load(data){\n\n        if(!(Array.isArray(data) && data.length === this.board.length)){\n            throw RangeError(`\\\nCells.load: the argument must be an Array[ ${this.board.length} ]`)\n        }\n\n        this._data = data\n        const baseConfig = this.baseConfig\n\n        data.forEach((primitive, i) => {\n\n            // board coordinates\n            const coord = this.indexToCoord(i),\n                  [cX, cY] = this.cellPixelCoords(coord),\n                  [x, y] = this.tokenPixelCoords(coord)\n            \n            const cell = this.board.getCell(coord)\n\n            cell.label = primitive\n            cell.x = cX\n            cell.y = cY\n            // the 'baseConfig' is a singleton that contains common readonly props\n            cell.token = Token.create(primitive, {x, y, baseConfig})\n        })\n    }\n\n    clear(){\n        const ctx = this.ctx\n        ctx.shadowBlur = 0\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        ctx.fillStyle = this.backgroundColor\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    drawResults(){\n        this.clear()\n\n        const ctx = this.ctx,\n              halfW = Math.floor(this.canvas.width / 2),\n              indent = Math.floor(this.cellSize * 0.3)\n\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillStyle = '#666'\n        ctx.font = this.cellFont\n\n        let x = halfW,\n            y = this.cellSize * 0.5\n\n        ctx.fillText('Results', x, y)\n        ctx.lineWidth = this.cellSize * 0.02\n        ctx.beginPath()\n        ctx.strokeStyle = \"#bbb\"\n        ctx.moveTo(0, y * 1.8)\n        ctx.lineTo(this.canvas.width, y * 1.3)\n        ctx.stroke()\n        ctx.closePath()\n\n        ctx.font = this.panelFont\n        ctx.fillStyle = '#777'\n        \n        y = this.cellSize * 1.2\n\n        x = halfW - indent\n        ctx.textAlign = 'right'\n        ctx.fillText('Time:', x, y)\n\n        x = halfW + indent\n        ctx.textAlign = 'left'\n        ctx.fillText(this.timer.toString(), x, y)\n\n        y = this.cellSize * 1.5\n        \n        x = halfW - indent\n        ctx.textAlign = 'right'\n        ctx.fillText('Steps:', x, y)\n        \n        x = halfW + indent\n        ctx.textAlign = 'left'\n        ctx.fillText(this.counter.toString(), x, y)\n\n        y = this.cellSize * 2.2\n\n        x = halfW\n        ctx.font = this.cellFont\n        ctx.fillStyle = '#666'\n        ctx.textAlign = 'center'\n        ctx.fillText('Click to exit!', x, y)\n\n        this.canvas.addEventListener('click', () => {\n            this.destroy()\n        })\n    }\n\n    drawPanel(config){\n\n        const ctx = config.ctx\n                       \n        const y = config.iconCenterY,\n              hover = this.hoverButton,\n              baseStyle = config.iconStrokeStyle,\n              hoverStyle = config.hoverIconStyle\n        // x & radius will change\n        let x = config.closeCenterX,\n            radius = config.iconRadius\n\n        // panel background\n        this.ctx.fillStyle = config.panelBackground\n        this.ctx.fillRect(0, 0, this.canvas.width, this.panelSize)\n\n        // panel line\n        ctx.lineWidth = config.bottomLineWidth\n        ctx.strokeStyle = config.bottomLineStrokeStyle\n        ctx.beginPath()\n        ctx.moveTo(0, config.bottomLineY)\n        ctx.lineTo(this.canvas.width, config.bottomLineY)\n        ctx.stroke()\n        ctx.closePath()\n\n        ctx.lineWidth = config.iconLineWidth\n\n        // close\n        ctx.strokeStyle = (hover === 'close') ? hoverStyle : baseStyle\n        ctx.beginPath()\n        ctx.moveTo(x - radius, y - radius)\n        ctx.lineTo(x + radius, y + radius)\n        ctx.moveTo(x - radius, y + radius)\n        ctx.lineTo(x + radius, y - radius)\n        ctx.stroke()\n        ctx.closePath()\n\n        // reload\n        x = config.reloadCenterX\n        ctx.strokeStyle = (hover === 'reload') ? hoverStyle : baseStyle\n        ctx.beginPath()\n        ctx.arc(x, y, radius, ...config.reloadCircleRads)\n        ctx.stroke()\n        ctx.closePath()\n\n        // pause\n        const padding = Math.floor(radius * 0.4),\n              style = (hover === 'pause') ? hoverStyle : baseStyle\n\n        x = config.pauseCenterX\n        ctx.beginPath()\n        if(this.paused){\n            ctx.fillStyle = style\n            ctx.moveTo(x - radius, y - radius)\n            ctx.lineTo(x + radius, y)\n            ctx.lineTo(x - radius, y + radius)\n            ctx.fill()\n        } else {\n            ctx.strokeStyle = style\n            ctx.moveTo(x - padding, y - radius)\n            ctx.lineTo(x - padding, y + radius)\n            ctx.moveTo(x + padding, y - radius)\n            ctx.lineTo(x + padding, y + radius)\n            ctx.stroke()\n        }\n\n        ctx.closePath()\n\n        //if(this.hoverButton){\n        //    ctx.fillStyle = '#666'\n        //    ctx.fillRect(...this.hoverButton)\n        //}\n    } // _drawPanel\n\n    drawPausedBoard(){\n        this.ctx.font = this.cellFont\n        this.ctx.fillText(\n            'Paused',\n            Math.floor(this.canvas.width / 2),\n            Math.floor(this.canvas.height / 2),\n        )\n    }\n\n    draw(){\n\n        if(!this.changed){\n            return\n        }\n\n        this.changed = false\n\n        this.clear()\n        this.drawPanel(this.panelConfig)\n        this.timer.draw(this.timerConfig)\n        this.counter.draw(this.counterConfig)\n\n        if(this.paused){\n            this.drawPausedBoard()\n            return\n        }\n\n        for(let i = 0, len = this.board.length; i < len; i++){\n\n            const coords = this.indexToCoord(i),\n                  cell = this.board.getCell(coords),\n                  token = cell.token\n\n            cell.draw(this.cellConfig)\n\n            // free cell\n            if(token === null){\n                continue\n            }\n            \n            const changes = {}\n            let config = {}\n\n            if(token instanceof ActiveToken){\n                \n                config = this.activeConfig\n\n                const s = this.selected\n                if(s && (s[0] === coords[0] && s[1] === coords[1])){\n                    changes.tokenFillColor = '#8f8f8f'\n                }\n\n                const c = this.hoverToken\n                if(c && (c[0] === coords[0] && c[1] === coords[1])){\n                   changes.tokenBorderColor = '#aaa'\n                   changes.tokenBorderWidth = Math.floor(this.tokenSize * 0.05)\n                }\n\n            } else if(token instanceof PassiveToken){\n                config = this.PassiveConfig\n            }\n            \n            if(Object.keys(changes).length){\n                config = Object.assign({}, config, changes)\n            }\n\n            token.draw(config)\n        }\n    }\n\n    update(){\n        const queue = this.eventQueue,\n              timer = this.timer,\n              stamp = timer.getSeconds()\n\n        if(!this.paused){\n            timer.update()\n        }\n\n        if(queue.length || timer.getSeconds() !== stamp){\n            this.changed = true\n        }\n\n        while(queue.length){\n            const handler = queue.shift()\n            if(!handler){\n                return\n            }\n            handler() \n        }\n    }\n\n    frame(){\n        const state = this.state\n\n        this.update()\n        this.draw()\n\n        if(state === this.PLAY){\n            this.frameDescriptor = window.requestAnimationFrame(this.frameCallback)\n        } else {\n            window.cancelAnimationFrame(this.frameDescriptor)\n\n            if(state === this.CLOSE){\n                this.destroy()\n            } else if(state === this.RELOAD){\n                \n                this.hoverToken = null\n                this.selected = null\n                this.changed = true\n                this.paused = false\n                this.state = this.PLAY\n                this.eventQueue.length = 0    \n                \n                this.load(this._data)\n                this.run()\n            } else if(state === this.VICTORY){\n                this.drawResults()\n            }\n        }\n    }\n\n    run(){\n       if(this.onopen){\n           this.onopen()\n       }\n\n       while(this.isComplete()){\n            this.shuffle(Math.floor(this.board.length / 2))\n       }\n\n        this.state = this.PLAY\n        this.paused = false\n        this.counter.start()\n        this.timer.start()\n\n        this.frameDescriptor = window.requestAnimationFrame(this.frameCallback)\n    }\n}\n\nexport default Cells\n","import { Board } from './board'\nimport {\n    Token,\n    ActiveToken,\n    PassiveToken,\n} from './token'\n\n\n\nclass CellsBuilder {\n\n    constructor(size, config){\n\n        this.PLAY = 'play'\n        this.RELOAD = 'reload'\n        this.CLOSE = 'close'\n        this.SAVE = 'save'\n\n        this.MAX_LINE_VALUE = 9\n        this.MIN_LINE_VALUE = 3\n        this.MIN_SIZE = 12\n\n        this.initialSize = [4, 3]\n        this.initialBoard = Array(this.initialSize[0] * this.initialSize[1]).fill(null)\n\n        this.state = null\n\n        this.cellSize = 0  // base value\n        \n        if(config){\n            Object.assign(this, config)\n        }\n\n        if(!size){\n            size = this.initialSize\n        }\n\n        if(size[0] * size[1] < this.MIN_SIZE){\n            throw new RangeError(\n`CellsBuilder: board size area \"${ size[0] * size[1] }\" should be great or equal to \"${ this.MIN_SIZE }\"`\n            )\n        }\n\n        if(size[0] < this.MIN_LINE_VALUE || size[1] < this.MIN_LINE_VALUE){\n            throw new RangeError(\n`CellsBuilder: board size \"[${ size[0] }, ${ size[1] }]\" should be contains values greater or equal \"${ this.MIN_LINE_VALUE }\"`\n            )\n        }\n\n        this.board = new Board(size)\n\n\n        // canvas HTMLElement\n        this.canvas = document.createElement('canvas')\n        this.ctx = this.canvas.getContext('2d')\n        this.backgroundColor = '#fff'\n\n        // in board coords\n        this.hoverToken = null\n        this.selected = null\n\n        this.eventQueue = []\n        \n        this.changed = true\n\n        // button name\n        this.hoverButton = null\n        \n        // text\n        this.baseFontSize = Math.floor(this.cellSize * 0.3)\n        this.panelFontSize = Math.floor(this.baseFontSize * 0.9)\n    \n        this.cellFont = `900 ${ this.baseFontSize }px 'Montserrat', serif`\n        this.panelFont = `bold ${ this.panelFontSize }px 'Montserrat', serif`\n        \n        // paddings & styles\n        this.canvasPadding = Math.floor(this.cellSize * 0.05)\n        this.cellPadding = Math.floor(this.cellSize * 0.05)\n        this.rectRound = Math.floor(this.cellSize * 0.07)\n        this.tokenSize = this.cellSize - this.cellPadding * 2\n\n        // menu panel\n        this.panelSize = Math.floor(this.cellSize * 1.6)\n        this.panelBasePadding = this.canvasPadding + this.cellPadding\n        this.panelButtonSize = Math.floor(this.cellSize * 0.35)\n        this.arrowButtonWidth = Math.floor(this.cellSize * 0.5)\n        this.arrowButtonHeight = this.cellSize\n\n        this.panelCurrentToken = 0\n        this.panelSelectedToken = null\n\n        // canvas\n        this.computeCanvasSize()\n        \n        // menu buttons\n        this.buttonRadius = Math.floor(this.panelButtonSize * 0.5),\n        this.buttonPadding = Math.floor(this.panelButtonSize * 0.3)\n        \n        //=======================\n        this.frameCallback = this.frame.bind(this)\n        this.computeStyles()\n        this.attachEvents()\n        \n        this.computePanelButtons()\n    }\n\n    mount(selector){\n        document.querySelector(selector).appendChild(this.canvas)\n    }\n\n    computeCanvasSize(){\n        this.canvas.width = this.cellSize * this.board.cols + this.canvasPadding * 2\n        this.canvas.height = (\n            this.cellSize * this.board.rows + \n            this.canvasPadding * 2 + this.panelSize\n        )\n    }\n\n    computePanelButtons(){\n        let decreaseRowsButton = [\n            Math.floor(this.canvas.width / 2) - Math.floor(this.cellSize * 0.55) - this.panelButtonSize,\n            Math.floor(this.panelSize * 0.99) - this.panelBasePadding - this.panelButtonSize,\n            this.panelButtonSize,\n            this.panelButtonSize,\n        ],\n        increaseRowsButton = [\n            decreaseRowsButton[0],\n            decreaseRowsButton[1] - this.panelButtonSize * 2,\n            this.panelButtonSize,\n            this.panelButtonSize,\n        ],\n        decreaseColsButton = [\n            decreaseRowsButton[0] - Math.floor(this.panelButtonSize * 1.6),\n            decreaseRowsButton[1],\n            this.panelButtonSize,\n            this.panelButtonSize,\n        ],\n        increaseColsButton = [\n            decreaseColsButton[0],\n            increaseRowsButton[1],\n            this.panelButtonSize,\n            this.panelButtonSize,\n        ],\n        leftArrowButton = [\n            this.canvas.width \n            - this.panelBasePadding\n            - Math.floor(\n                (this.canvas.width - (\n                    Math.floor(this.canvas.width / 2)\n                    - Math.floor(this.cellSize * 0.55)\n                    + this.panelBasePadding * 2)\n                ) \n              / 2) \n            - this.cellSize,\n            this.panelSize - this.cellSize - this.panelBasePadding,\n            this.arrowButtonWidth,\n            this.arrowButtonHeight,\n        ],\n        setToken = [\n            leftArrowButton[0] + this.arrowButtonWidth + this.cellPadding,\n            leftArrowButton[1] + this.cellPadding,\n            this.tokenSize,\n            this.tokenSize,\n        ],\n        rightArrowButton = [\n            leftArrowButton[0] + this.arrowButtonWidth + this.cellSize,\n            leftArrowButton[1],\n            this.arrowButtonWidth,\n            this.arrowButtonHeight,\n        ],\n        closeButton = [\n            rightArrowButton[0] + this.arrowButtonWidth - this.panelButtonSize,\n            Math.floor(this.panelButtonSize * 0.15),\n            this.panelButtonSize,\n            this.panelButtonSize,\n        ],\n        reloadButton = [\n            closeButton[0] - (this.panelButtonSize + Math.floor(this.buttonPadding * 0.5)),\n            closeButton[1],\n            this.panelButtonSize,\n            this.panelButtonSize,\n        ],\n        saveButton = [\n            reloadButton[0] - (this.panelButtonSize + Math.floor(this.buttonPadding * 0.5)),\n            reloadButton[1],\n            this.panelButtonSize,\n            this.panelButtonSize,\n        ]\n\n        this.buttons = {\n            decreaseRowsButton,\n            increaseRowsButton,\n            decreaseColsButton,\n            increaseColsButton,\n            leftArrowButton,\n            setToken,\n            rightArrowButton,\n            closeButton,\n            reloadButton,\n            saveButton,\n        }\n\n        const cfg = {\n            x: setToken[0],\n            y: setToken[1],\n            baseConfig: this.baseConfig,\n        }\n\n        this.panelTokens = [1, ...Object.values(PassiveToken.prototype.states)].map(\n            v => Token.create(v, cfg)\n        )\n    }\n\n    refreshUI(){\n        this.computeCanvasSize()\n        this.computePanelButtons()\n    }\n\n    computeStyles(){\n\n        this.cellConfig = Object.freeze({\n            ctx: this.ctx,\n            font: this.cellFont,\n            textFillStyle: '#999',\n            textAlign: 'center',\n            textBaseline: 'middle',\n            textMaxWidth: Math.floor(this.cellSize * 0.70),\n            localTextX: Math.floor(this.cellSize / 2),\n            localTextY: Math.floor(this.cellSize / 1.8)\n        })\n\n        this.baseConfig = Object.freeze({\n            ctx: this.ctx,\n            tokenSize: this.tokenSize,\n            rectRound: this.rectRound,  // round size\n            _roundRect: this._roundRect,  // function\n        })\n\n        this.activeConfig = Object.freeze({\n            // token\n            tokenBorderColor: '#bbb',\n            tokenBorderWidth: Math.floor(this.tokenSize * 0.02),\n            tokenFillColor: '#ddd',\n            tokenShadowColor: '#999',\n            tokenShadowBlur: Math.floor(this.tokenSize * 0.05),\n            tokenShadowOffsetX: Math.floor(this.tokenSize * 0.04),\n            tokenShadowOffsetY: Math.floor(this.tokenSize * 0.04),\n            // text\n            font: this.cellFont,\n            textFillStyle: '#555',\n            textAlign: 'center',\n            textBaseline: 'middle',\n            textMaxWidth: Math.floor(this.tokenSize * 0.75),\n            localTextX: Math.floor(this.tokenSize / 2),\n            localTextY: Math.floor(this.tokenSize / 1.8),\n        })\n\n        this.passiveConfig = Object.freeze({\n            // token\n            tokenFillColor: '#fff',\n            // figure\n            lineCap: 'round',\n            lineWidth: Math.floor(this.tokenSize * 0.09),\n            arrowColor: \"#777\",\n            xLineColor: '#fff',\n            arcFill: \"#bbb\",\n            figureRadius: Math.floor(this.tokenSize * 0.2),\n            center: Math.floor(this.tokenSize / 2)\n        })\n\n        this.panelConfig = Object.freeze({\n            ctx: this.ctx,\n            panelBackground: '#fff',\n            bottomLineY: Math.floor(this.panelSize * 0.99),\n            bottomLineWidth: Math.floor(this.cellSize * 0.04),\n            bottomLineStrokeStyle: '#666',\n            fontColor: '#555',\n            buttonColor: '#aaa',\n            hoverButtonColor: '#888',\n            iconColor: '#eee',\n            iconLineWidth: Math.floor(this.panelButtonSize * 0.15),\n            arrowWidth: Math.floor(this.arrowButtonWidth * 0.5),\n            arrowHeight: this.arrowButtonWidth,\n            arrowLineWidth: Math.floor(this.arrowButtonWidth * 0.25)\n        })\n    }\n\n    attachEvents(){\n        // cursor & cursor coords\n        this.canvas.addEventListener('mouseover', (function(e){\n            \n            const moveHandler = (function(e){\n                this.eventQueue.push(this.onHover.bind(this, e))\n            }).bind(this)\n\n            this.canvas.addEventListener('mouseleave', (function(e){\n                this.canvas.removeEventListener('mousemove', moveHandler, false)\n                this.hoverToken = null\n                this.hoverButton = null\n                this.changed = true\n            }).bind(this), false)\n\n            this.canvas.addEventListener('mousemove', moveHandler, false)\n\n        }).bind(this), false)\n\n        // click & selected\n        this.canvas.addEventListener('click', (function(e){\n            this.eventQueue.push(this.onClick.bind(this, e))\n        }).bind(this), false)\n\n        // при всплытии тача на клик, будет двойной клик, а это удаляет элемент\n        // если всплытие убрать, не заработают кнопки\n        //\n        //this.canvas.addEventListener('touchstart', (function(e){\n        //    this.eventQueue.push(this.onHover.bind(this, e))\n        //    this.eventQueue.push(this.onTouch.bind(this, e))\n        //}).bind(this), false)\n        //\n        //this.canvas.addEventListener('touchend', (function(e){\n        //    this.eventQueue.push(this.onTouch.bind(this, e))\n        //    this.hoverToken = null\n        //}).bind(this), false)\n\n        /* \n        Холст не перемещается по странице, при ведении пальцем,\n        но если карта большая, ее не сдвинуть - нужно создать иконку\n        для вкл/выкл перемещения или при долком касании end-start >= 1000\n        \n        this.canvas.addEventListener('touchmove', (function(e){\n            e.preventDefault()\n        }).bind(this), false)\n\n        this.canvas.addEventListener('touchcancel', (function(e){\n            e.preventDefault()\n        }).bind(this), false) */\n    }\n\n    onHover(e){\n        const cursorPix = this.canvasPixelCoords(e),\n              hoverCell = this.hoverTokenCoords(cursorPix),\n              hoverButton = this.hoverButtonName(cursorPix),\n              cursorType = (hoverCell || hoverButton) ? 'pointer' : 'default'\n            \n        this.hoverToken = hoverCell\n        this.hoverButton = hoverButton\n        this.canvas.style.cursor = cursorType\n    }\n\n    onClick(e){\n        const pixCoords = this.canvasPixelCoords(e),\n              coords = this.hoverTokenCoords(pixCoords),\n              button = this.hoverButtonName(pixCoords)\n\n        if(!coords && !button){\n            return\n        }\n\n        if(coords){\n            if(this.panelSelectedToken){\n                \n                const pixCoords = this.tokenPixelCoords(coords),\n                      config = {\n                          x: pixCoords[0],\n                          y: pixCoords[1],\n                          baseConfig: this.baseConfig,\n                      },\n                      raw = Token.toRaw(this.panelSelectedToken),\n                      newToken = Token.create(raw, config)\n                \n                this.board.setItem(coords, newToken)\n                this.eventQueue.push(this.onChange.bind(this))\n\n            } else {\n                if(this.selected){\n                    if(this.selected[0] === coords[0] && this.selected[1] === coords[1]){\n                        this.board.setItem(coords, null)\n                    } else {\n                        this.change(this.selected, coords)\n                    }\n                    this.selected = null\n                    this.eventQueue.push(this.onChange.bind(this))\n                } else if(this.board.getItem(coords)){\n                    this.selected = coords\n                }\n            }\n            \n\n        } else if(button){\n\n            switch(button){\n            \n            case 'increaseColsButton':\n                if(this.board.cols < this.MAX_LINE_VALUE){\n                    const oldData = this.save(),\n                          newSize = oldData['cols'] + 1,\n                          newBoard = new Board([\n                              oldData['rows'],\n                              newSize,\n                          ]),\n                          newMap = []\n\n                    for(let i = 0; i < newBoard.length; i++){\n                        if((i + 1) % newSize === 0){\n                            newMap[i] = null\n                            continue;\n                        }\n                        newMap[i] = oldData.map.shift()\n                    }\n\n                    this.board.destroy()\n                    this.board = newBoard\n                    this.refreshUI()\n                    this.load(newMap)\n                } \n                break;\n\n            case 'decreaseColsButton':\n                if(\n                    (this.board.length - this.board.rows >= this.MIN_SIZE) &&\n                    (this.board.cols > this.MIN_LINE_VALUE)\n                ){\n                    const oldData = this.save(),\n                          newSize = oldData['cols'] - 1,\n                          newBoard = new Board([\n                              oldData['rows'],\n                              newSize,\n                          ]),\n                          newMap = []\n    \n                    for(let i = 0; i < newBoard.length; i++){\n                        newMap[i] = oldData.map.shift()\n                        if((i + 1) % newSize === 0){\n                            oldData.map.shift()\n                        }\n                    }\n\n                    this.board.destroy()\n                    this.board = newBoard\n                    this.refreshUI()\n                    this.load(newMap)\n                    }\n                break;\n            \n            case 'increaseRowsButton':\n                if(this.board.rows < this.MAX_LINE_VALUE){\n                    const oldData = this.save(),\n                          newSize = oldData['rows'] + 1,\n                          newBoard = new Board([\n                              newSize,\n                              oldData['cols'],\n                          ]),\n                          newMap = [...oldData.map, ...Array(oldData.cols).fill(null)]\n                    this.board.destroy()\n                    this.board = newBoard\n                    this.refreshUI()\n                    this.load(newMap)\n                } \n                break;\n\n            case 'decreaseRowsButton':\n                if(\n                    (this.board.length - this.board.cols >= this.MIN_SIZE) && \n                    (this.board.rows > this.MIN_LINE_VALUE)\n                ){\n                    const oldData = this.save(),\n                          newSize = oldData['rows'] - 1,\n                          newBoard = new Board([\n                              newSize,\n                              oldData['cols'],\n                          ]),\n                          newMap = [...oldData.map]\n                          newMap.length -= oldData.cols\n                    this.board.destroy()\n                    this.board = newBoard\n                    this.refreshUI()\n                    this.load(newMap)\n                } \n                break;\n\n            case 'leftArrowButton':\n                this.panelCurrentToken = (this.panelCurrentToken > 0) \n                    ? this.panelCurrentToken - 1 \n                    : this.panelTokens.length - 1  \n                this.panelSelectedToken = null\n                break;\n\n            case 'setToken':\n                if(this.selected){\n                    this.selected = null\n                }\n                this.panelSelectedToken = this.panelSelectedToken \n                    ? null\n                    : this.panelTokens[this.panelCurrentToken]\n                break;\n\n            case 'rightArrowButton':\n                this.panelCurrentToken = (this.panelCurrentToken + 1) % this.panelTokens.length\n                this.panelSelectedToken = null\n                break;\n\n            case 'closeButton':\n                this.state = this.CLOSE\n                break;\n\n            case 'reloadButton':\n                this.state = this.RELOAD\n                break;\n\n            case 'saveButton':\n                if(this.isValid()){\n                    if(this.onsave){\n                        this.onsave(this.save())\n                    }\n                    this.state = this.CLOSE\n                } else {\n                    this.state = this.PLAY\n                }\n                break;\n            }\n        }\n\n    }\n    \n    onChange(){\n        let value = 1\n        for(let i = 0; i < this.board.length; i++){\n            let token = this.board.getItem(this.indexToCoord(i))\n            if(token instanceof ActiveToken){\n                token.value = value++\n            }\n        }\n    }\n\n    isValid(){\n        const validators = [\n\n            conf => { // active cells amount\n                const result = { errors: [], warnings: [] },\n                      minimum = Math.floor(conf.map.length * 0.5),\n                      recommended = Math.floor(conf.map.length * 0.7),\n                      numCount = conf.map.reduce((a, e) => { \n                          return typeof(e) === 'number' ? a + 1 : a\n                       }, 0)\n                if(numCount < minimum){\n                    result.errors.push(\n//`You should be increase the number of the active tokens from ${ numCount } to ${ minimum }.`\n`Количество числовых тайлов должно быть не меньше ${ minimum }, вы установили ${ numCount }.`\n                    )\n                } else if(numCount < recommended){\n                    result.warnings.push(\n//`The recommended number of active tokens should be equal or greater ${ recommended }, you set ${ numCount }.`\n`Рекомендуемое количество числовых тайлов ${ recommended } и выше, вы установили ${ numCount }.`\n                    )\n                }\n                return result\n            },\n\n            conf => { // free cells amount\n                const result = { errors: [], warnings: [] },\n                      minimum = Math.floor(conf.map.length * 0.1) || 1,\n                      overflow = Math.floor(conf.map.length * 0.3) || 2,\n                      freeCount = conf.map.reduce((a, e) => { \n                        return e ? a : a + 1\n                      }, 0)\n                \n                if(freeCount < minimum){\n                    result.errors.push(\n//`You should be increase the number of the free cells from ${ freeCount } to ${ minimum }.`\n`Необходимо увеличить количество пустых ячеек с ${ freeCount } до ${ minimum }.`\n)\n                } else if(freeCount >= overflow){\n                    result.warnings.push(\n//`The recommended number of the free cells should be lower ${ overflow }, you set ${ freeCount }.`\n`Рекомендуемое количество пустых ячеек составляет ${ overflow - 1 } и ниже, вы установили ${ freeCount }.`\n)\n                }\n\n                return result\n            },\n\n            conf => { // passive cells amount\n                const result = { errors: [], warnings: [] },\n                      recommended = Math.floor(conf.map.length * 0.1) || 1,\n                      overflow = Math.floor(conf.map.length * 0.25) || 3,\n                      passiveCount = conf.map.reduce((a, e) => { \n                        return typeof(e) === 'string' ? a + 1 : a\n                      }, 0)\n                \n                if(passiveCount < recommended){\n                    result.warnings.push(\n//`For an interesting game, the recommended number of passive tokens can be about ${ recommended }, you set ${ passiveCount }.`\n`Для интересной и насыщенной игры, рекомендуется установить ${ recommended } неигровых тайлов, вы установили ${ passiveCount }.`\n)\n                } else if(passiveCount >= overflow){\n                    result.errors.push(\n//`You should be decrease the number of the passive cells from ${ passiveCount } to ${ overflow - 1}.`\n`Необходимо уменьшить количество неигровых тайлов с ${ passiveCount } до ${ overflow - 1}.`\n                    )\n                }\n\n                return result\n            },\n\n            conf => {\n                const result = { errors: [], warnings: [] },\n                      rows = conf.rows,\n                      cols = conf.cols,\n                      incorrectAngleTokens = [\n                          'top',\n                          'bottom',\n                          'left',\n                          'right',\n                          'horizontal',\n                          'vertical',\n                          'all',\n                      ],\n                      incorrectRowTokens = [\n                          'top',\n                          'bottom',\n                          'vertical',\n                          'all',\n                      ],\n                      incorrectColTokens = [\n                          'left',\n                          'right',\n                          'horizontal',\n                          'all',\n                      ]\n\n                conf.map.forEach((e, i) => {\n                    const row = Math.floor(i / cols),\n                          col = i % cols\n\n                    let coords = null\n\n                    if(\n                        (row === 0 && col === 0) \n                        || (row === 0 && col === (cols - 1))\n                        || (row === (rows - 1) && col === 0)\n                        || (row === (rows - 1) && col === (cols - 1))\n                    ){\n                        if(incorrectAngleTokens.includes(e)){\n                            coords = this.indexToCoord(i).map(e => e += 1)\n                            result.errors.push(\n//`It makes no sense to use a \"${ e }\" token state in the [${ this.indexToCoord(i) }] cell.`\n`Не имеет смысла использовать неактивный тайл \"${ e }\" в ячейке [${ coords }].`\n                            )\n                            return;\n                        }\n                    }\n                    \n                    if(row === 0 || row === (rows - 1)){\n                        if(incorrectRowTokens.includes(e)){\n                            coords = this.indexToCoord(i).map(e => e += 1)\n                            result.errors.push(\n//`It makes no sense to use a \"${ e }\" token state in the [${ this.indexToCoord(i) }] cell.`\n`Не имеет смысла использовать неактивный тайл \"${ e }\" в ячейке [${ coords }].`\n                            )\n                            return;\n                        }\n                    }\n\n                    if(col === 0 || col === (cols - 1)){\n                        if(incorrectColTokens.includes(e)){\n                            coords = this.indexToCoord(i).map(e => e += 1)\n                            result.errors.push(\n//`It makes no sense to use a \"${ e }\" token state in the [${ this.indexToCoord(i) }] cell.`\n`Не имеет смысла использовать неактивный тайл \"${ e }\" в ячейке [${ coords }].`\n                            )\n                        }\n                        return;\n                    }\n                })\n\n                return result\n            },\n\n            conf => {\n                const result = { errors: [], warnings: [] },\n                      passiveCellsCoords = conf.map.map((e, i) => {\n                          if(typeof(e) === 'string'){\n                              return this.indexToCoord(i)\n                          }\n                      }).filter(e => !!e)\n\n                passiveCellsCoords.forEach((c, i, a) => {\n                    for(let j = i + 1; j < a.length; j++){\n                        let n = a[j]\n\n                        if(\n                            ((Math.abs(c[0] - n[0]) === 1) && c[1] === n[1])\n                            || ((Math.abs(c[1] - n[1]) === 1) && c[0] === n[0])\n                        ){\n                            result.warnings.push(\n//`Pay attention to the correctness of nearby passive tokens [${ c }] and [${ n }].`\n`Будьте внимательны, устанавливая рядом неактивные тайлы в ячейках [${ c.map(e => e += 1) }] и [${ n.map(e => e += 1) }].`\n                            )\n                        }\n                    }\n                })\n\n                return result\n            }\n        ]\n\n        const rawMap = this.save()\n\n        const data = validators\n            .map(fn => fn(rawMap))\n            .reduce((acc, res) => {\n                if(res.errors){\n                    acc.errors = [...acc.errors, ...res.errors]\n                }\n                if(res.warnings){\n                    acc.warnings = [...acc.warnings, ...res.warnings]\n                }\n                return acc\n            }, { errors: [], warnings: [] })\n\n        console.log(`[errors]\\n${ data.errors.join('\\n') }\\n[warnings]\\n${ data.warnings.join('\\n') }\\n`)\n\n        if(data.errors.length > 0){\n            if(this.onerror){\n                this.onerror(data.errors.slice())\n            }         \n            return false\n        } else if(data.warnings.length > 0 && this.onwarning){\n            return this.onwarning(data.warnings.slice())\n        } else {\n            return true\n        }\n    }\n\n    change(from, to){\n        const board = this.board,\n              fromToken = this.board.getItem(from),\n              toToken = this.board.getItem(to),\n              fromPixelCoords = this.tokenPixelCoords(from),\n              toPixelCoords = this.tokenPixelCoords(to)\n\n        board.setItem(from, toToken)\n        board.setItem(to, fromToken)\n\n        if(toToken && toToken instanceof Token){\n            toToken.x = fromPixelCoords[0]\n            toToken.y = fromPixelCoords[1]\n        }\n\n        if(fromToken && fromToken instanceof Token){\n            fromToken.x = toPixelCoords[0]\n            fromToken.y = toPixelCoords[1]\n        }\n    }\n\n    indexToCoord(i){\n        const line = Math.floor(i / this.board.cols),\n              item = i % this.board.cols\n\n        return [line, item]\n    }\n\n    canvasPixelCoords(e){\n\n        const tag = e.target,\n              left = tag.offsetLeft,\n              top = tag.offsetTop\n\n        let clickX, clickY\n        \n        if(e.type === 'touchstart' || e.type === 'touchend'){\n            clickX = e.changedTouches[0].pageX\n            clickY = e.changedTouches[0].pageY\n        } else {\n            clickX = e.pageX\n            clickY = e.pageY\n        }\n\n        const x = clickX - left,\n              y = clickY - top\n\n        return [x, y]\n    }\n\n    cellPixelCoords(boardCoords){\n        const [line, item] = boardCoords,\n              x = item * this.cellSize + this.canvasPadding,\n              y = line * this.cellSize + this.canvasPadding + this.panelSize\n\n        return [x, y]\n    }\n\n    // token local pixel coords\n    tokenPixelCoords(boardCoords){\n        const [x, y] = this.cellPixelCoords(boardCoords)\n        return [x + this.cellPadding, y + this.cellPadding]\n    }\n\n    // returns null or token board coords if cursor is on it\n    hoverTokenCoords(coords){\n        const canvPad = this.canvasPadding,\n              height = this.canvas.height - canvPad,\n              width = this.canvas.width - canvPad,\n              cellPad = this.cellPadding,\n              tSize = this.tokenSize,\n              pSize = this.panelSize\n\n        if(\n            (coords[0] < canvPad || coords[1] < canvPad + pSize) ||\n            (coords[0] > width || coords[1] > height)\n        ){\n            return null\n        }\n\n        const toCellX = (coords[0] - canvPad) % (tSize + cellPad * 2),\n              toCellY = (coords[1] - (canvPad + pSize)) % (tSize + cellPad * 2),\n              x = Math.floor((coords[0] - canvPad) / (tSize + cellPad * 2)),\n              y = Math.floor((coords[1] - (canvPad + pSize)) / (tSize + cellPad * 2))\n\n        return (\n            (toCellX > cellPad && toCellY > cellPad) &&\n            (\n                (toCellX < tSize + Math.floor(cellPad * 1.4)) && \n                (toCellY < tSize + Math.floor(cellPad * 1.4))\n            )\n        ) ? [y, x] : null\n    }\n\n    hoverButtonName(coords){\n\n        const canvPad = this.canvasPadding,\n              width = this.canvas.width - canvPad,\n              height = this.panelSize,\n              buttons = this.buttons\n\n        if(\n            (coords[0] < canvPad || coords[1] < canvPad) ||\n            (coords[0] > width || coords[1] > height)\n        ){\n            return null\n        }\n\n        for(let buttonName in buttons){\n            let button  = buttons[buttonName]\n            if(\n                (button[0] < coords[0] && coords[0] < button[0] + button[2]) && \n                (button[1] < coords[1] && coords[1] < button[1] + button[3])\n            ){\n                return buttonName\n            }\n        }\n\n        return null\n    }\n\n\n    _roundRect(ctx, x, y, width, height, radius = 5, fill = true, stroke = true){\n \n        if (typeof radius === 'number') {\n          radius = {tl: radius, tr: radius, br: radius, bl: radius};\n        } else {\n          var defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0};\n          for (var side in defaultRadius) {\n            radius[side] = radius[side] || defaultRadius[side];\n          }\n        }\n\n        ctx.beginPath();\n        ctx.moveTo(x + radius.tl, y);\n        ctx.lineTo(x + width - radius.tr, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n        ctx.lineTo(x + width, y + height - radius.br);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\n        ctx.lineTo(x + radius.bl, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n        ctx.lineTo(x, y + radius.tl);\n        ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n        ctx.closePath();\n        if (fill) {\n          ctx.fill();\n        }\n        if (stroke) {\n          ctx.stroke();\n        }\n    }\n\n    clearLocalData(){\n        this.hoverToken = null\n        this.selected = null\n        this.changed = true\n        this.state = null\n        this.panelSelectedToken = null\n        this.panelCurrentToken = 0\n        this.eventQueue.length = 0\n    }\n\n    destroy(){\n        this.clearLocalData()\n        delete this.frameCallback\n        delete this._data\n        delete this.ctx\n        delete this.baseConfig\n        delete this.activeConfig\n        delete this.passiveConfig\n        delete this.panelConfig\n        delete this.counterConfig\n        delete this.timerConfig\n        this.board.destroy()\n        delete this.board\n        this.canvas.parentNode.removeChild(this.canvas)\n        delete this.canvas\n\n        if(this.onclose){\n            this.onclose()\n        }\n    }\n\n    load(data){\n\n        if(!data){\n            data = this.initialBoard\n        }\n\n        if(!(Array.isArray(data) && data.length === this.board.length)){\n            throw RangeError(`\\\nCellsBuilder.load: the argument must be an Array(${ this.board.length }), given (${ Array.isArray(data) ? data.length : typeof(data) })`)\n        }\n\n        this._data = data\n        const baseConfig = this.baseConfig\n\n        data.forEach((primitive, i) => {\n\n            // board coordinates\n            const coord = this.indexToCoord(i),\n                  [cX, cY] = this.cellPixelCoords(coord),\n                  [x, y] = this.tokenPixelCoords(coord)\n            \n            const cell = this.board.getCell(coord)\n\n            cell.label = '?'\n            cell.x = cX\n            cell.y = cY\n            // the 'baseConfig' is a singleton that contains common readonly props\n            cell.token = Token.create(primitive, {x, y, baseConfig})\n        })\n    }\n\n    save(){\n        const res = {\n            cols: this.board.cols,\n            rows: this.board.rows,\n            map: [],\n        }\n\n        for(let i = 0; i < this.board.length; i++){\n            let token = this.board.getItem(this.indexToCoord(i))\n            res.map.push(Token.toRaw(token))\n        }\n        return res\n    }\n\n    clear(){\n        const ctx = this.ctx\n        ctx.shadowBlur = 0\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        ctx.fillStyle = this.backgroundColor\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    _drawButtonArc(ctx, color, x, y, r){\n        ctx.beginPath()\n        ctx.fillStyle = color\n        ctx.moveTo(x, y)\n        ctx.arc(x, y, r, 0, Math.PI * 2)     \n        ctx.fill()\n        ctx.closePath()\n    }\n\n    _drawPanelText(ctx, font, value, color, x, y, width){\n        ctx.beginPath()\n        ctx.font = font\n        ctx.fillStyle = color\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(\n            value,\n            x,\n            y,\n            width\n        )\n        ctx.fill()\n        ctx.closePath()\n    }\n\n    drawPanel(config){\n\n        const ctx = config.ctx,\n              cellSize = this.cellSize,\n              font = this.panelFont,\n              fontColor = config.fontColor,\n              buttonSize = this.panelButtonSize,\n              buttonPadding = this.buttonPadding,\n              buttonColor = config.buttonColor,\n              hoverColor = config.hoverButtonColor,\n              hoverButton = this.hoverButton,\n              iconColor = config.iconColor,\n              iconLineWidth = config.iconLineWidth,\n              arrowButtonWidth = this.arrowButtonWidth,\n              arrowWidth = config.arrowWidth,\n              arrowHeight = config.arrowHeight,\n              arrowLineWidth = config.arrowLineWidth,\n              radius = this.buttonRadius\n\n              \n        // decrease rows button\n        let button = 'decreaseRowsButton',\n            x = this.buttons[button][0],\n            y = this.buttons[button][1],\n            centerX = x + radius,\n            centerY = y + radius,\n            fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        this._drawButtonArc(ctx, fillColor, centerX, centerY, radius)\n        ctx.beginPath()\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = iconColor\n        ctx.lineWidth = iconLineWidth\n        ctx.moveTo(x + buttonPadding, centerY)\n        ctx.lineTo(x + buttonSize - buttonPadding, centerY)\n        ctx.stroke()\n        ctx.closePath()\n\n        // rows number value\n        y -= buttonSize\n        this._drawPanelText(\n            ctx,\n            font,\n            this.board.rows,\n            fontColor,\n            x + radius,\n            y + radius,\n            buttonSize\n        );\n\n        // increase rows button\n        button = 'increaseRowsButton'\n        x = this.buttons[button][0]\n        y = this.buttons[button][1]\n        centerY = y + radius\n        fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        this._drawButtonArc(ctx, fillColor, centerX, centerY, radius)\n        ctx.beginPath()\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = iconColor\n        ctx.lineWidth = iconLineWidth\n        ctx.moveTo(centerX, y + buttonPadding)\n        ctx.lineTo(centerX, y + buttonSize - buttonPadding)\n        ctx.moveTo(x + buttonPadding, centerY)\n        ctx.lineTo(x + buttonSize - buttonPadding, centerY)\n        ctx.stroke()\n        ctx.closePath()\n\n        // rows header\n        y -= buttonSize\n        this._drawPanelText(\n            ctx,\n            font,\n            'H',\n            fontColor,\n            x + buttonSize * 0.5,\n            y + buttonSize * 0.5,\n            buttonSize\n        );\n\n\n        // decrease cols button\n        button = 'decreaseColsButton'\n        x = this.buttons[button][0]\n        y = this.buttons[button][1]\n        centerX = x + radius\n        centerY = y + radius\n        fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        this._drawButtonArc(ctx, fillColor, centerX, centerY, radius)\n        ctx.beginPath()\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = iconColor\n        ctx.lineWidth = iconLineWidth\n        ctx.moveTo(x + buttonPadding, centerY)\n        ctx.lineTo(x + buttonSize - buttonPadding, centerY)\n        ctx.stroke()\n        ctx.closePath()\n\n        // cols value\n        y -= buttonSize\n        this._drawPanelText(\n            ctx,\n            font,\n            this.board.cols,\n            fontColor,\n            x + radius,\n            y + radius,\n            buttonSize\n        );\n\n        // increase cols button\n        button = 'increaseColsButton'\n        x = this.buttons[button][0]\n        y = this.buttons[button][1]\n        centerY = y + radius\n        fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        this._drawButtonArc(ctx, fillColor, centerX, centerY, radius)\n        ctx.beginPath()\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = iconColor\n        ctx.lineWidth = iconLineWidth\n        ctx.moveTo(centerX, y + buttonPadding)\n        ctx.lineTo(centerX, y + buttonSize - buttonPadding)\n        ctx.moveTo(x + buttonPadding, centerY)\n        ctx.lineTo(x + buttonSize - buttonPadding, centerY)\n        ctx.stroke()\n        ctx.closePath()\n\n        // cols header\n        y = y - buttonSize\n        this._drawPanelText(\n            ctx,\n            font,\n            'W',\n            fontColor,\n            x + buttonSize * 0.5,\n            y + buttonSize * 0.5,\n            buttonSize\n        )\n\n        // separator\n        x = x + buttonSize\n        this._drawPanelText(\n            ctx,\n            font,\n            '/',\n            fontColor,\n            x + buttonPadding,\n            y + buttonSize * 0.5,\n            buttonPadding * 2\n        );\n\n\n        // left arrow\n        button = 'leftArrowButton'\n        x = this.buttons[button][0]\n        y = this.buttons[button][1]\n        centerX = x + Math.floor(arrowButtonWidth * 0.5)\n        centerY = y + arrowButtonWidth\n        fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        ctx.beginPath()\n        //ctx.fillStyle = '#aaa'\n        //ctx.fillRect(x, y, arrowButtonWidth, cellSize)\n        //ctx.fill()\n        ctx.lineWidth = arrowLineWidth\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = fillColor\n        ctx.moveTo(centerX + Math.floor(arrowWidth * 0.5), centerY - Math.floor(arrowHeight * 0.5))\n        ctx.lineTo(centerX - Math.floor(arrowWidth * 0.5), centerY)\n        ctx.lineTo(centerX + Math.floor(arrowWidth * 0.5), centerY + Math.floor(arrowHeight * 0.5))\n        ctx.stroke()\n        ctx.closePath()\n\n        // cell\n        button = 'setToken'\n        fillColor = (hoverButton === button) ? '#bbb' : '#ccc'\n        ctx.beginPath()\n        ctx.fillStyle = fillColor\n        ctx.fillRect(x + arrowButtonWidth, y, cellSize, cellSize)\n        const token = this.panelTokens[this.panelCurrentToken]\n        if(token){\n            let tConf = token instanceof ActiveToken ? this.activeConfig : this.passiveConfig\n            if(this.panelSelectedToken){\n                tConf = Object.assign({}, tConf, {\n                    tokenFillColor: '#8f8f8f'\n                })\n            }\n            token.draw(tConf)\n        }\n        ctx.closePath();\n\n        // right arrow\n        button = 'rightArrowButton'\n        x = this.buttons[button][0]\n        y = this.buttons[button][1]\n        centerX = x + Math.floor(arrowButtonWidth * 0.5)\n        fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        ctx.beginPath()\n        //ctx.fillStyle = '#aaa'\n        //ctx.fillRect(x, y, arrowButtonWidth, cellSize)\n        //ctx.fill()\n        ctx.lineWidth = arrowLineWidth\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = fillColor\n        ctx.moveTo(centerX - Math.floor(arrowWidth * 0.5), centerY - Math.floor(arrowHeight * 0.5))\n        ctx.lineTo(centerX + Math.floor(arrowWidth * 0.5), centerY)\n        ctx.lineTo(centerX - Math.floor(arrowWidth * 0.5), centerY + Math.floor(arrowHeight * 0.5))\n        ctx.stroke()\n        ctx.closePath();\n\n        // close button\n        button = 'closeButton'\n        x = this.buttons[button][0]\n        y = this.buttons[button][1]\n        centerX = x + radius\n        centerY = y + radius\n        fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        ctx.beginPath()\n        ctx.fillStyle = fillColor\n        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2)\n        ctx.fill()\n        ctx.closePath()\n        // close icon\n        ctx.beginPath()\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = iconColor\n        ctx.lineWidth = iconLineWidth\n        ctx.moveTo(x + buttonPadding, y + buttonPadding)\n        ctx.lineTo(x + buttonSize - buttonPadding, y + buttonSize - buttonPadding)\n        ctx.moveTo(x + buttonSize - buttonPadding, y + buttonPadding)\n        ctx.lineTo(x + buttonPadding, y + buttonSize - buttonPadding)\n        ctx.stroke()\n        ctx.closePath();\n\n        // reload button\n        button = 'reloadButton'\n        x = this.buttons[button][0]\n        y = this.buttons[button][1]\n        centerX = x + radius   \n        fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        ctx.beginPath()\n        ctx.fillStyle = fillColor\n        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2)\n        ctx.fill()\n        ctx.closePath()\n        // reload icon\n        ctx.beginPath()\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = iconColor\n        ctx.lineWidth = iconLineWidth\n        ctx.arc(centerX, centerY, radius - buttonPadding * 0.8, Math.PI * 0.2, 2* Math.PI - Math.PI * 0.4)\n        ctx.stroke()\n        ctx.closePath();\n\n        // save button\n        button = 'saveButton'\n        x = this.buttons[button][0]\n        y = this.buttons[button][1]\n        centerX = x + radius\n        fillColor = (hoverButton === button) ? hoverColor : buttonColor\n        ctx.beginPath()\n        ctx.fillStyle = fillColor\n        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2)\n        ctx.fill()\n        ctx.closePath()\n        // save icon\n        ctx.beginPath()\n        ctx.lineCap = 'round'\n        ctx.strokeStyle = iconColor\n        ctx.lineWidth = iconLineWidth\n        ctx.moveTo(x + buttonPadding, y + buttonPadding * 1.5)\n        ctx.lineTo(centerX, y + buttonSize - buttonPadding)\n        ctx.lineTo(x + buttonSize - buttonPadding, y + buttonPadding)\n        ctx.stroke()\n        ctx.closePath()\n\n        // panel bottom line\n        ctx.lineWidth = config.bottomLineWidth\n        ctx.strokeStyle = config.bottomLineStrokeStyle\n        ctx.beginPath()\n        ctx.moveTo(0, config.bottomLineY)\n        ctx.lineTo(this.canvas.width, config.bottomLineY)\n        ctx.stroke()\n        ctx.closePath()\n\n    } // _drawPanel\n\n    draw(){\n\n        if(!this.changed){\n            return\n        }\n\n        this.changed = false\n\n        this.clear()\n        this.drawPanel(this.panelConfig)\n\n        for(let i = 0, len = this.board.length; i < len; i++){\n\n            const coords = this.indexToCoord(i),\n                  cell = this.board.getCell(coords),\n                  token = cell.token\n\n            cell.draw(this.cellConfig)\n\n            // free cell\n            if(token === null){\n                continue\n            }\n            \n            const changes = {}\n            let config = {}\n\n            if(token instanceof ActiveToken){      \n                config = this.activeConfig\n            } else if(token instanceof PassiveToken){\n                config = this.passiveConfig\n            }\n            \n            const s = this.selected\n            if(s && (s[0] === coords[0] && s[1] === coords[1])){\n                changes.tokenFillColor = '#8f8f8f'\n            }\n\n            const c = this.hoverToken\n            if(c && (c[0] === coords[0] && c[1] === coords[1])){\n               changes.tokenBorderColor = '#aaa'\n               changes.tokenBorderWidth = Math.floor(this.tokenSize * 0.05)\n            }\n\n            if(Object.keys(changes).length){\n                config = Object.assign({}, config, changes)\n            }\n\n            token.draw(config)\n        }\n    }\n\n    update(){\n        const queue = this.eventQueue\n\n        if(!queue.length){\n            return\n        }\n\n        this.changed = true\n\n        while(queue.length){\n            let h = queue.shift()\n            if(h){\n                h()\n            }\n        }\n\n        queue.length = 0\n    }\n\n    frame(){\n        this.update()\n        this.draw()\n\n        switch(this.state){\n\n        case this.PLAY:\n            this.frameDescriptor = window.requestAnimationFrame(this.frameCallback)\n            break;\n\n        case this.RELOAD:\n            this.clearLocalData()\n            this.board.destroy()\n            this.board = new Board(this.initialSize)\n            this.load(this.initialBoard)\n            this.refreshUI()\n\n            this.state = this.PLAY\n            this.frameDescriptor = window.requestAnimationFrame(this.frameCallback)\n            break;\n\n        case this.CLOSE:\n            window.cancelAnimationFrame(this.frameDescriptor)\n            this.destroy()\n            break;\n\n        default:\n            throw new RangeError(\n`CellsBuilder.frame: incorrect game state \"${ this.state }\"`\n            )\n\n        }\n    }\n\n    run(){\n        if(this.onopen){\n            this.onopen()\n        }\n\n        this.state = this.PLAY\n        this.frameDescriptor = window.requestAnimationFrame(this.frameCallback)\n    }\n}\n\nexport default CellsBuilder\n","import { Cells, CellsBuilder } from '../../index';\n\nconst isMapBuilder = confirm('Хотите сами создать карту?');\n\nlet cells;\n\nif(isMapBuilder) {\n    cells = new CellsBuilder(null, { cellSize: 80 });\n\n    let game, config;\n\n    cells.onsave = function(data){\n        config = data\n        game = new Cells([data.rows, data.cols], { cellSize: 80 })\n    }\n\n    cells.onclose = () => {\n        if(game && config){\n            game.onclose = () => { window.location.reload() }; \n            game.mount('#app')\n            game.load(config.map)\n            game.run()\n        } else {\n            window.location.reload(); \n        }\n    }\n\n    cells.onerror = errors => alert(`Ошибка\\n\\n${ errors.join('\\n') }`)\n    cells.onwarning = warnings => confirm(\n`Внимание\n\n${ warnings.join('\\n') }\n\nВсе равно сохранить карту?\n`);\n\n    cells.mount('#app');\n    cells.load();\n    cells.run();\n} else {\n    const size = [5, 5];\n\n    const map = [\n        1, 2, 3, 4, 5,\n        6, null, 'bottom', 7, 'top',\n        8, 'vertical', null, 9, 10,\n        11, null, 'none', null, 12,\n        13, 14, 'horizontal',15,16,\n    ];\n\n    cells = new Cells(size, { cellSize: 80 });\n    cells.onclose = () => { window.location.reload() }; \n    cells.mount('#app');\n    cells.load(map);\n    cells.run();\n}\n\n"],"sourceRoot":""}